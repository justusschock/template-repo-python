name: "CI complete testing"

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    # branches:
      # - master
    branches-ignore:
      - '**'
  pull_request:
    # branches:
    #   - master
    branches-ignore:
      - '**'

jobs:
  pytest:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-10.15]
        python-version: [3.6, 3.7, 3.8]
        requires: ['minimal', 'latest']

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 35

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Update Pip
      run: |
        pip install --quiet "pip>=20.1" --upgrade --user  # needed for get pip cacher folder

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        # TODO adapt the following
        brew install libomp  # https://github.com/pytorch/pytorch/issues/20030
        # brew install openmpi  # Horovod on macOS requires OpenMPI, Gloo not currently supported

    - name: Setup Windows
      if: runner.os == 'windows'
      run: |
        # remove Horovod from requirements
        python -c "fname = 'requirements/extra.txt' ; lines = [line for line in open(fname).readlines() if not line.startswith('horovod')] ; open(fname, 'w').writelines(lines)"

    # versions <= 1.3 may have issues on mac with some BLAS ops due to missing mkl (https://github.com/pytorch/pytorch/issues/18996)
    - name: Setup MacOS Minimal
      if: runner.os == 'macOS' && matrix.requires == 'minimal'
      run : |
        python -c "fname = 'requirements/install.txt' ; req = open(fname).read().replace('torch>=1.3', 'torch>=1.4') ; open(fname, 'w').write(req)"

    - name: Set min. dependencies
      if: matrix.requires == 'minimal'
      run: |
        python -c "fname = 'requirements/install.txt' ; req = open(fname).read().replace('>=', '==') ; open(fname, 'w').write(req)"
        python -c "fname = 'requirements/extra.txt' ; req = open(fname).read().replace('>=', '==') ; open(fname, 'w').write(req)"
        python -c "fname = 'requirements/devel.txt' ; req = open(fname).read().replace('>=', '==') ; open(fname, 'w').write(req)"

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    - name: Get pip cache
      id: pip-cache
      run: |
        # echo "::set-output name=dir::$(pip cache dir)"
        python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"


    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.requires }}-pip-${{ hashFiles('requirements/install.txt') }}-${{ hashFiles('requirements/extra.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.requires }}-pip-

    - name: Install dependencies
      run: |
        pip install --requirement requirements/install.txt --quiet --upgrade
        pip install --requirement tests/requirements.txt --quiet --use-feature=2020-resolver        python --version
        python --version
        pip --version
        pip list
      shell: bash

    # - name: Reinstall Horovod if necessary
    #   if: runner.os != 'windows'
    #   run: |
    #     HOROVOD_BUILT=$(python -c "import horovod.torch; horovod.torch.nccl_built(); print('SUCCESS')" || true)
    #     if [[ $HOROVOD_BUILT != "SUCCESS" ]]; then
    #       pip uninstall -y horovod
    #       HOROVOD_BUILD_ARCH_FLAGS="-mfma" pip install --no-cache-dir $(grep "horovod" requirements/extra.txt)
    #     fi
    #     horovodrun --check-build
    #   shell: bash

    - name: Cache datasets
      uses: actions/cache@v2
      with:
        path: Datasets # This path is specific to Ubuntu
        # Look to see if there is a cache hit for the corresponding requirements file
        key: pl-dataset

    - name: Tests
      run: |
        # NOTE: do not include coverage report here, see: https://github.com/nedbat/coveragepy/issues/1003
        coverage run --source REPO_NAME -m pytest REPO_NAME tests -v --junitxml=junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@master
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: always()

    - name: Statistics
      if: success()
      run: |
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        flags: cpu,pytest
        name: CPU-coverage
        fail_ci_if_error: false
